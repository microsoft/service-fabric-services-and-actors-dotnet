<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorCommunicationTargetSelectorEndpointNotFound" xml:space="preserve">
    <value>No endpoint found for the service '{0}' partition '{1}' that matches the specified TargetReplicaSelector : '{2}'</value>
  </data>
  <data name="ErrorCommunicationTargetSelectorInvalidStateful" xml:space="preserve">
    <value>The value '{0}' of targetReplicaSelector argument is not a valid for a stateful service</value>
  </data>
  <data name="ErrorCommunicationTargetSelectorInvalidStateless" xml:space="preserve">
    <value>The value '{0}' of targetReplicaSelector argument is not valid for a stateless service</value>
  </data>
  <data name="ErrorConfigFileNotFound" xml:space="preserve">
    <value>Config File was Not Found in this path {0}</value>
  </data>
  <data name="ErrorConfigPackageNotFound" xml:space="preserve">
    <value>ConfigPackageName {0} was not found.</value>
  </data>
  <data name="ErrorInvalidAddress" xml:space="preserve">
    <value>Client is trying to connect to invalid address {0}.</value>
  </data>
  <data name="ErrorInvalidPartitionEndpointAddress" xml:space="preserve">
    <value>The EndpointAddress '{0}' for partition '{1}' is not in a format understood by the client</value>
  </data>
  <data name="ErrorInvalidValueForIncludeServiceContext" xml:space="preserve">
    <value>Invalid value for IncludeServiceContext parameter under ServiceTelemetry section. Only valid values are 'true' and 'false'.</value>
  </data>
  <data name="ErrorListenerAlreadyExists" xml:space="preserve">
    <value>Listener with Name '{0}' already exists. When multiple communication listeners are used, a unique name should be specified for each listener.</value>
  </data>
  <data name="ErrorListenerNameNotSpecified" xml:space="preserve">
    <value>Unique Name must be specified for each listener when multiple communication listeners are used</value>
  </data>
  <data name="ErrorPartitionNamedEndpointNotFound" xml:space="preserve">
    <value>NamedEndpoint '{0}' not found in the address '{1}' for partition '{2}'</value>
  </data>
  <data name="ErrorParttionInstanceInvalidAddress" xml:space="preserve">
    <value>The primary or stateless instance for the partition '{0}' has invalid address, this means that right address from the replica/instance is not registered in the system.</value>
  </data>
  <data name="ErrorSectionNameNotFound" xml:space="preserve">
    <value>SectionName {0} was Not Found in the Settings File</value>
  </data>
  <data name="ErrorServiceDoesNotExist" xml:space="preserve">
    <value>Service '{0}' doesnot exist</value>
  </data>
  <data name="ErrorServiceMethodDispatcher_InterfaceNotFound" xml:space="preserve">
    <value>Interface id {0} is not implemented by object {1}</value>
  </data>
  <data name="ErrorServiceTooBusy" xml:space="preserve">
    <value>This can happen if message is dropped when service is busy or its long running operation and taking more time than configured Operation Timeout.</value>
  </data>
  <data name="Error_ConnectionDenied" xml:space="preserve">
    <value>Client is Not authorized to connect</value>
  </data>
  <data name="event_StatefulRunAsyncCancellation" xml:space="preserve">
    <value>RunAsync has been cancelled for a stateful service replica.  The cancellation will be considered 'slow' if RunAsync does not halt execution within {6} milliseconds.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}</value>
  </data>
  <data name="event_StatefulRunAsyncCompletion" xml:space="preserve">
    <value>RunAsync has successfully completed for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}, WasCancelled: {6}</value>
  </data>
  <data name="event_StatefulRunAsyncFailure" xml:space="preserve">
    <value>RunAsync has failed for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}, WasCancelled: {6}, Exception: {7}</value>
  </data>
  <data name="event_StatefulRunAsyncInvocation" xml:space="preserve">
    <value>RunAsync has been invoked for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}</value>
  </data>
  <data name="event_StatefulRunAsyncSlowCancellation" xml:space="preserve">
    <value>RunAsync was slow to respect the cancellation token and halt execution for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}, Time to Cancel: {6} milliseconds, Slow Cancellation Timeout: {7} milliseconds</value>
  </data>
  <data name="event_StatelessRunAsyncCancellation" xml:space="preserve">
    <value>RunAsync has been cancelled for a stateless service instance.  The cancellation will be considered 'slow' if RunAsync does not halt execution within {6} milliseconds.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}</value>
  </data>
  <data name="event_StatelessRunAsyncCompletion" xml:space="preserve">
    <value>RunAsync has successfully completed for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}, WasCancelled: {6}</value>
  </data>
  <data name="event_StatelessRunAsyncFailure" xml:space="preserve">
    <value>RunAsync has failed for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}, WasCancelled: {6}, Exception: {7}</value>
  </data>
  <data name="event_StatelessRunAsyncInvocation" xml:space="preserve">
    <value>RunAsync has been invoked for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}</value>
  </data>
  <data name="event_StatelessRunAsyncSlowCancellation" xml:space="preserve">
    <value>RunAsync was slow to respect the cancellation token and halt execution for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}, Time to Cancel: {6} milliseconds, Slow Cancellation Timeout: {7} milliseconds</value>
  </data>
</root>